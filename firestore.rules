rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is an owner
    function isOwner() {
      return isAuthenticated() && request.auth.token.owner == true;
    }

    // Helper function to check if user is an executive
    function isExecutive() {
      return isAuthenticated() && request.auth.token.executive == true;
    }

    // Helper function to check if user has permission for a specific committee
    function hasCommitteePermission(committee) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/UserPermissions/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/UserPermissions/$(request.auth.uid)).data.permissions[committee + 'Blog'] == true;
    }

    // UserProfiles collection rules
    match /UserProfiles/{userId} {
      allow read: if isAuthenticated();
      // Allow users to write to their own profile, and owners to write to any profile
      allow write: if request.auth.uid == userId || isOwner();
    }

    // BlogPosts collection rules
    match /blogPosts/{postId} {
      // Non-authenticated users can only read visible posts, but without authorId
      allow read: if !isAuthenticated() && resource.data.visible == true;
      // Authenticated users can read all posts
      allow read: if isAuthenticated();
      // Only owners and executives can create/update/delete posts
      allow create: if isOwner() || isExecutive();
      allow update, delete: if isOwner() || 
        (isExecutive() && hasCommitteePermission(resource.data.organization));
    }

    // User Permissions security rules
    match /UserPermissions/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner() || (isExecutive() && 
        // Only allow executives to update permissions for non-executive users
        (!get(/databases/$(database)/documents/UserExecutives/$(userId)).data.isExecutive) &&
        // Only allow updating the permissions field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['permissions'])
      );
    }
  }
} 